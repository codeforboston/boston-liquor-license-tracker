/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as MapTestIndexImport } from './routes/map-test/index'
import { Route as MapTestMaplibreImport } from './routes/map-test/maplibre'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const MapTestIndexRoute = MapTestIndexImport.update({
  id: '/map-test/',
  path: '/map-test/',
  getParentRoute: () => rootRoute,
} as any)

const MapTestMaplibreRoute = MapTestMaplibreImport.update({
  id: '/map-test/maplibre',
  path: '/map-test/maplibre',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/map-test/maplibre': {
      id: '/map-test/maplibre'
      path: '/map-test/maplibre'
      fullPath: '/map-test/maplibre'
      preLoaderRoute: typeof MapTestMaplibreImport
      parentRoute: typeof rootRoute
    }
    '/map-test/': {
      id: '/map-test/'
      path: '/map-test'
      fullPath: '/map-test'
      preLoaderRoute: typeof MapTestIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/map-test/maplibre': typeof MapTestMaplibreRoute
  '/map-test': typeof MapTestIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/map-test/maplibre': typeof MapTestMaplibreRoute
  '/map-test': typeof MapTestIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/map-test/maplibre': typeof MapTestMaplibreRoute
  '/map-test/': typeof MapTestIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/map-test/maplibre' | '/map-test'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/map-test/maplibre' | '/map-test'
  id: '__root__' | '/' | '/map-test/maplibre' | '/map-test/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MapTestMaplibreRoute: typeof MapTestMaplibreRoute
  MapTestIndexRoute: typeof MapTestIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MapTestMaplibreRoute: MapTestMaplibreRoute,
  MapTestIndexRoute: MapTestIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/map-test/maplibre",
        "/map-test/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/map-test/maplibre": {
      "filePath": "map-test/maplibre.tsx"
    },
    "/map-test/": {
      "filePath": "map-test/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
